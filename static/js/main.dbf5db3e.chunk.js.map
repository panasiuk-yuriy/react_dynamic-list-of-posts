{"version":3,"sources":["api/api.ts","User/User.tsx","Comment/Comment.tsx","CommentList.tsx","Post/Post.tsx","PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","responce","json","User","user","className","name","href","email","address","city","street","suite","Comment","comment","body","CommentList","userComments","map","key","id","Post","post","title","PostList","posts","App","useState","setPosts","query","setQuery","filterQuery","setfilterQuery","isLoading","setIsLoading","isVisible","setIsVisible","loadPosts","a","postFromServer","usersFromServer","commentsFromServer","preparedPosts","find","currentUser","userId","filter","postId","setfilterQueryWhitDebounce","useCallback","debounce","filteredPosts","useMemo","searchText","toLowerCase","includes","getFilteredPosts","type","onClick","htmlFor","placeholder","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbf5db3e.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getAll = <T> (url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(responce => responce.json());\n};\n\nexport const getPosts = () => getAll<Post>('posts');\nexport const getUsers = () => getAll<User>('users');\nexport const getComments = () => getAll<Comment>('comments');\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  user?: User;\n};\n\nconst User: React.FC<Props> = ({ user }) => (\n  <div className=\"post__user user\">\n    <h4 className=\"user__name\">{user?.name}</h4>\n    <p className=\"user__email\">\n      <a href={`mailto:${user?.email}`}>\n        {user?.email}\n      </a>\n    </p>\n    <p>\n      City:\n      <br />\n      <span className=\"user__address\">{user?.address?.city}</span>\n    </p>\n    <p>\n      Street:\n      <br />\n      <span className=\"user__address\">{user?.address?.street}</span>\n    </p>\n    <p>\n      Address:\n      <br />\n      <span className=\"user__address\">{user?.address?.suite}</span>\n    </p>\n  </div>\n);\n\nexport default User;\n","import React from 'react';\nimport './Comment.css';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FC<Props> = ({ comment: { name, email, body } }) => (\n  <div className=\"comment\">\n    <h5 className=\"comment__name\">{name}</h5>\n    <p className=\"comment__body\">{body}</p>\n    <p>\n      <a href={`mailto:${email}`} className=\"comment__email\">\n        {email}\n      </a>\n    </p>\n  </div>\n\n);\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment/Comment';\n\ntype Props = {\n  userComments?: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ userComments }) => (\n  <>\n    {userComments?.map((comment) => (\n      <Comment\n        key={comment.id}\n        comment={comment}\n      />\n    ))}\n  </>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport User from '../User/User';\nimport CommentList from '../CommentList';\nimport './Post.css';\n\ninterface Props {\n  post: Post;\n}\n\nconst Post: React.FC<Props> = ({\n  post: {\n    title, body, user, userComments,\n  },\n}) => (\n  <div className=\"post\">\n    <h3 className=\"post__title\">\n      {title}\n    </h3>\n    <p className=\"post__body\">\n      {body}\n    </p>\n    <User user={user} />\n    <CommentList userComments={userComments} />\n  </div>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from '../Post/Post';\nimport './PostList.css';\n\ntype Props = {\n  posts: Post[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"post__container\">\n    {posts.map(post => (\n      <Post\n        key={post.id}\n        post={post}\n      />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport './App.scss';\nimport debounce from 'lodash/debounce';\nimport { getPosts, getUsers, getComments } from './api/api';\nimport PostList from './PostList/PostList';\n\nconst getFilteredPosts = (posts: Post[], query: string) => {\n  const searchText = query.toLowerCase();\n\n  return posts.filter((post: Post) => (post.title + post.body)\n    .toLowerCase()\n    .includes(searchText));\n};\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setfilterQuery] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const loadPosts = async () => {\n    setIsLoading(!isLoading);\n    setIsVisible(!isVisible);\n    const postFromServer = await getPosts();\n    const usersFromServer = await getUsers();\n    const commentsFromServer = await getComments();\n\n    const preparedPosts = postFromServer.map(post => {\n      const user = usersFromServer\n        .find((currentUser: User) => currentUser.id === post.userId);\n      const userComments = commentsFromServer\n        .filter((comment: Comment) => (comment.postId === post.id));\n\n      return {\n        ...post,\n        user,\n        userComments,\n      };\n    });\n\n    setPosts(preparedPosts);\n    setIsLoading(false);\n  };\n\n  const setfilterQueryWhitDebounce = useCallback(debounce(setfilterQuery, 1000), []);\n\n  const handleChange = (event: { target: { value: React.SetStateAction<string> } }) => {\n    setfilterQueryWhitDebounce(event.target.value);\n    setQuery(event.target.value);\n  };\n\n  const filteredPosts = useMemo(() => {\n    return getFilteredPosts(posts, filterQuery);\n  }, [posts, filterQuery]);\n\n  return (\n    <div className=\"container\">\n      {!isVisible\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={loadPosts}\n            >\n              Load Posts\n            </button>\n          )}\n      {isLoading\n        ? <div className=\"loader\" />\n        : (isVisible\n          && (\n            <>\n              <label htmlFor=\"filter\">\n                Filter Posts:\n                <input\n                  type=\"textarea\"\n                  id=\"filter\"\n                  placeholder=\"Your filter...\"\n                  value={query}\n                  onChange={handleChange}\n                />\n              </label>\n              <PostList posts={filteredPosts} />\n            </>\n          )\n        )}\n\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}